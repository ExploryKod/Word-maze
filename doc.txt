Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.

For example, {{ name|striptags|title }} will remove all HTML Tags from variable name and title-case the output (title(striptags(name))).

Filters that accept arguments have parentheses around the arguments, just like a function call. For example: {{ listx|join(', ') }} will join a list with commas (str.join(', ', listx)).

The List of Builtin Filters below describes all the builtin filters.


Tests
Beside filters, there are also so-called “tests” available. Tests can be used to test a variable against a common expression. To test a variable or expression, you add is plus the name of the test after the variable. For example, to find out if a variable is defined, you can do name is defined, which will then return true or false depending on whether name is defined in the current template context.

Tests can accept arguments, too. If the test only takes one argument, you can leave out the parentheses. For example, the following two expressions do the same thing:

{% if loop.index is divisibleby 3 %}
{% if loop.index is divisibleby(3) %}
The List of Builtin Tests below describes all the builtin tests.

Comments:
{# note: commented-out template because we no longer use this
    {% for user in users %}
        ...
    {% endfor %}
#}

https://dev.to/xarala221/how-to-build-a-todo-application-with-python-flask-heroku-and-tailwind-css-40o3
reviews = db.relationship('Review', backref='reviewer', lazy='dynamic', cascade = 'all, delete, delete-orphan')


Disclaimer: read the full guide on the Tailwind CSS Flask documentation page from Flowbite.

Flask is an open-source micro web framework based on Python that allows you to quickly build websites using only a single Python file without requiring any other particular tools or libraries.

It is being used by hundreds of thousands of developers and even large companies such as Samsung, Netflix, Reddit, Lyft, and even Airbnb since its initial release in 2010.

By following this guide you will learn how to properly set up Tailwind CSS with Flowbite inside a Flask project and get started with building websites faster.

Requirements
Follow the next steps in this tutorial to learn how to install a Flask project with Tailwind CSS and the Flowbite component library.

Make sure that you have both Node.js and Python installed on your local machine.

After that, you’ll need to install Flask on your computer by following the official installation guide or by running the following command in the terminal if you have pip available in your Python environment:

python -m pip install Flask
Now that you have installed all of the required technologies you can now create a new Flask project.

Create a new project
Run the following command in the terminal to create a new Flask project with the name flowbite-flask:

mkdir flowbite-flask
cd flowbite-flask/
Create a new file called app.py inside the root of the project folder with the following content:

from flask import Flask, render_template
app = Flask(__name__)
@app.route("/")
@app.route("/index")
def index():
    return render_template("index.html")
if __name__ == '__main__':
    app.run(debug=True)
What we do here is that we import the Flask microframework from Python and also set the app route for a new index.html file inside the templates/ the folder that we will create in the next step.

Create two new folders called templates/ and static/:

flowbite-flask/
   - app.py
   - templates/
   - static/
This is what your project folder structure should look like.

Create a new index.html file inside your templates/ folder and create a basic HTML document structure:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flowbite Flask</title>
</head>
<body>
    <h1>Hello, Flask!</h1>
</body>
</html>
Start a local server by running python app.py inside your terminal:

python app.py
This should make the project available via the browser by going to http://localhost:5000/.

Install Tailwind CSS
Now that you have a working Flask project we can proceed by installing Tailwind CSS.

You can either follow the official installation guide or follow the next steps from this guide.

Install the tailwindcss package via NPM:

npm install -D tailwindcss
Create a new tailwind.config.js file by running the following command in your terminal:

npx tailwindcss init
Configure the template files inside the tailwind.config.js file:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./templates/**/*.html",
    "./static/src/**/*.js"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
Create a new static/src/ folder and add a new input.css file with the following content:

@tailwind base;
@tailwind components;
@tailwind utilities;
Run the following command to compile and watch for changes for the Tailwind CSS file:

npx tailwindcss -i ./static/src/input.css -o ./static/dist/css/output.css --watch
This will generate a new output.css file inside the static/dist/css/ folder that we will now include in the newly created index.html template file.

Include output.css inside the main index.html template:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flowbite Flask</title>
    <link rel="stylesheet" href="{{url_for('static',filename='dist/css/output.css')}}">
</head>
<body>
    <h1 class="text-blue-600">Hello, Flask!</h1>
</body>
</html>
Notice how the text-blue-600 class is now being applied using the configuration that we set up which means that you can start building user interfaces with Tailwind CSS

https://flowbite.com/docs/getting-started/flask/